"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[4117],{582:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/agent_autonomy_levels-8d3d9da62bf1f7741fa7787a60a98743.png"},2991:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/agent_workflow-092069bc9e0b2c3b401a60dac5ed95ad.png"},8378:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Agents & Workflows","title":"Agents & Workflows","description":"Theory","source":"@site/notes/Agents & Workflows.md","sourceDirName":".","slug":"/Agents & Workflows","permalink":"/notes/Agents & Workflows","draft":false,"unlisted":false,"editUrl":"https://github.com/p-s-vishnu/p-s-vishnu.github.io/tree/main/notes/Agents & Workflows.md","tags":[{"inline":true,"label":"llm","permalink":"/notes/tags/llm"}],"version":"current","frontMatter":{"title":"Agents & Workflows","tags":["llm"]},"sidebar":"tutorialSidebar","previous":{"title":"Hi!","permalink":"/notes/"},"next":{"title":"Python","permalink":"/notes/Languages/Python"}}');var s=n(4848),a=n(8453);const o={title:"Agents & Workflows",tags:["llm"]},r=void 0,l={},c=[{value:"Theory",id:"theory",level:2},{value:"1. Predefined paths",id:"1-predefined-paths",level:2},{value:"1.1. Prompt Chaining",id:"11-prompt-chaining",level:3},{value:"1.2. Parallelisation",id:"12-parallelisation",level:3},{value:"2. LLM directs control flow in predefined paths",id:"2-llm-directs-control-flow-in-predefined-paths",level:2},{value:"2.1. Orchestrator-Worker",id:"21-orchestrator-worker",level:3},{value:"2.2. Evaluator-optimiser",id:"22-evaluator-optimiser",level:3},{value:"2.3. Routing",id:"23-routing",level:3},{value:"3. LLM directs its own actions",id:"3-llm-directs-its-own-actions",level:2},{value:"Practical",id:"practical",level:2},{value:"1. Stateful Agent Workflows with LangGraph",id:"1-stateful-agent-workflows-with-langgraph",level:3},{value:"2. Deploying Agents as APIs with FastAPI",id:"2-deploying-agents-as-apis-with-fastapi",level:2},{value:"3. Agent memory with redis",id:"3-agent-memory-with-redis",level:2},{value:"4. Tool &amp; API Integration via Model Context Protocol (MCP)",id:"4-tool--api-integration-via-model-context-protocol-mcp",level:2},{value:"5. A2A (Agent-to-Agent) Communication Protocol",id:"5-a2a-agent-to-agent-communication-protocol",level:2},{value:"Paralant chatbots",id:"paralant-chatbots",level:3}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"theory",children:"Theory"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Autonomy levels",src:n(582).A+"",width:"1794",height:"1150"})}),"\n",(0,s.jsx)(t.p,{children:"Broad categorisation"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Agent Workflow",src:n(2991).A+"",width:"4572",height:"2047"})}),"\n",(0,s.jsx)(t.h2,{id:"1-predefined-paths",children:"1. Predefined paths"}),"\n",(0,s.jsx)(t.h3,{id:"11-prompt-chaining",children:"1.1. Prompt Chaining"}),"\n",(0,s.jsx)(t.h3,{id:"12-parallelisation",children:"1.2. Parallelisation"}),"\n",(0,s.jsx)(t.h2,{id:"2-llm-directs-control-flow-in-predefined-paths",children:"2. LLM directs control flow in predefined paths"}),"\n",(0,s.jsx)(t.h3,{id:"21-orchestrator-worker",children:"2.1. Orchestrator-Worker"}),"\n",(0,s.jsx)(t.h3,{id:"22-evaluator-optimiser",children:"2.2. Evaluator-optimiser"}),"\n",(0,s.jsx)(t.h3,{id:"23-routing",children:"2.3. Routing"}),"\n",(0,s.jsx)(t.h2,{id:"3-llm-directs-its-own-actions",children:"3. LLM directs its own actions"}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"practical",children:"Practical"}),"\n",(0,s.jsxs)(t.h3,{id:"1-stateful-agent-workflows-with-langgraph",children:["1. Stateful Agent Workflows with ",(0,s.jsx)(t.a,{href:"https://github.com/NirDiamant/agents-towards-production/blob/main/tutorials/LangGraph-agent/langgraph_tutorial.ipynb",children:"LangGraph"})]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"State Management:"})," Maintain persistent state across interactions"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Flexible Routing:"})," Define complex flows between components"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Persistence:"}),"\xa0Save and resume workflows"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Visualisation:"}),"\xa0See and understand your agent's structure"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"General steps:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'from langgraph.graph import StateGraph, END\n\n# Memory\nclass State(TypedDict):\n    text: str\n    classification: str\n    entities: List[str]\n    summary: str\n\nfrom langchain.prompts import PromptTemplate\nfrom langchain.schema import HumanMessage\n\n# Step 0: Define Tools\ndef classification_node(state: State):\n    \'\'\'Classify the text into one of the categories: News, Blog, Research, or Other\'\'\'\n    prompt = PromptTemplate(\n        input_variables=["text"],\n        template="Classify the following text into one of the categories: News, Blog, Research, or Other.\\n\\nText:{text}\\n\\nCategory:"\n    )\n    message = HumanMessage(content=prompt.format(text=state["text"]))\n    classification = llm.invoke([message]).content.strip()\n    return {"classification": classification}\ndef route_after_classification(state: EnhancedState) -> str:\n    category = state["classification"].lower() # returns: "news", "blog", "research", "other"\n    return category in ["news", "research"]\n\n# Step 1: Create our StateGraph\nworkflow = StateGraph(State)\n\n# Step 2: Define nodes\nworkflow.add_node("classification_node", classification_node)\n\n# Step 3: Define graph\n# Step 3.1: Set the entry point of the graph\nworkflow.set_entry_point("classification_node")\n\n# Step 3.2: Add conditional edges\nworkflow.add_conditional_edges("classification_node", route_after_classification, path_map={\n    True: "entity_extraction",  # TODO: define these tools\n    False: "summarization"      # TODO: define these tools\n})\n\n# Step 3.3: Add static edges\nworkflow.add_edge("classification_node", "entity_extraction")\nworkflow.add_edge("entity_extraction", "summarization")\nworkflow.add_edge("summarization", END)\n\n# Step 3.4: Compile\napp = workflow.compile()\n# Optional: Visualise using mermaid tool\n\n'})}),"\n",(0,s.jsxs)(t.h2,{id:"2-deploying-agents-as-apis-with-fastapi",children:["2. Deploying Agents as APIs with ",(0,s.jsx)(t.a,{href:"https://github.com/NirDiamant/agents-towards-production/blob/main/tutorials/fastapi-agent/fastapi-agent-tutorial.ipynb",children:"FastAPI"})]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Pytest and ",(0,s.jsx)(t.code,{children:"from fastapi.testclient import TestClient"})," (httpx dependency)."]}),"\n",(0,s.jsxs)(t.li,{children:["Add ",(0,s.jsx)(t.code,{children:"class Config:"})," inside class BaseModel to add example reosne in teh API docs."]}),"\n",(0,s.jsx)(t.li,{children:"Async generation"}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'import asyncio\n\nclass SimpleAgent:\n    def __init__(self, name="FastAPI Agent"):\n        self.name = name\n\n    async def generate_response_stream(self, query):\n        """Generate a streaming response to a user query"""\n        prefix = f"Agent {self.name} thinking about: \'{query}\'\\n"\n        response = "This is a simulated agent response that streams token by token."\n        # Yield the prefix as a single chunk\n        yield prefix \n        # Stream the response token by token with small delays\n        for token in response.split():\n            await asyncio.sleep(0.1)  # Simulate thinking time\n            yield token + " "\nagent = SimpleAgent()\n\n# Create a streaming endpoint for the agent\n@app.post("/agent/stream")\nasync def stream_agent(request: QueryRequest):\n    """Stream a response from the agent token by token"""\n    \n    async def event_generator():\n        async for token in agent.generate_response_stream(request.query):\n            # Format as a JSON object\n            data = json.dumps({"token": token})\n            yield f"data: {data}\\n\\n"\n\n    return StreamingResponse(\n        event_generator(),\n        media_type="text/event-stream"\n    )\n'})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Next steps in the page: advanced agents, fast api background task, async db."}),"\n"]}),"\n",(0,s.jsxs)(t.h2,{id:"3-agent-memory-with-redis",children:["3. ",(0,s.jsx)(t.a,{href:"https://github.com/NirDiamant/agents-towards-production/tree/main/tutorials/agent-memory-with-redis",children:"Agent memory with redis"})]}),"\n",(0,s.jsxs)(t.h2,{id:"4-tool--api-integration-via-model-context-protocol-mcp",children:["4. ",(0,s.jsx)(t.a,{href:"https://github.com/NirDiamant/agents-towards-production/blob/main/tutorials/agent-with-mcp/mcp-tutorial.ipynb",children:"Tool & API Integration via Model Context Protocol (MCP)"})]}),"\n",(0,s.jsxs)(t.p,{children:["Traditional methods of connecting AI models with external resources often involve custom integrations for each ",(0,s.jsx)(t.strong,{children:"data source or tool"}),". This leads to:"]}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Integration Complexity"}),": Each new data source requires a unique implementation"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Scalability Issues"}),": Adding new tools becomes progressively harder"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Maintenance Overhead"}),": Updates to one integration may break others"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"MCP solves these challenges by providing a standardised protocol that enables:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Unified Access"}),": A single interface for multiple data sources and tools"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Plug-and-Play Extensions"}),": Easy addition of new capabilities"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Stateful Communication"}),": Real-time, two-way communication between AI and resources"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Dynamic Discovery"}),": AI can find and use new tools on the fly"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Official MCP Servers:"})," ",(0,s.jsx)(t.a,{href:"https://github.com/modelcontextprotocol/servers/tree/main/src",children:"https://github.com/modelcontextprotocol/servers/tree/main/src"})]}),"\n",(0,s.jsxs)(t.h2,{id:"5-a2a-agent-to-agent-communication-protocol",children:["5. ",(0,s.jsx)(t.a,{href:"https://github.com/NirDiamant/agents-towards-production/blob/main/tutorials/a2a/a2a_tutorial.ipynb",children:"A2A (Agent-to-Agent) Communication Protocol"})]}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h3,{id:"paralant-chatbots",children:"Paralant chatbots"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://www.parlant.io/docs/about",children:"https://www.parlant.io/docs/about"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"References"})}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/NirDiamant/agents-towards-production/tree/main?tab=readme-ov-file#-agent-frameworks",children:"NirDiamant Agent framework"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://blog.langchain.com/what-is-a-cognitive-architecture/",children:"https://blog.langchain.com/what-is-a-cognitive-architecture/"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://langchain-ai.github.io/langgraph/",children:"https://langchain-ai.github.io/langgraph/"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://fastapi.tiangolo.com/tutorial/testing/",children:"https://fastapi.tiangolo.com/tutorial/testing/"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var i=n(6540);const s={},a=i.createContext(s);function o(e){const t=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);